var _shoppingCartJs = require('./shoppingCart.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _shoppingCartJsDefault = _parcelHelpers.interopDefault(_shoppingCartJs);
var _lodashEs = require('lodash-es');
var _lodashEsDefault = _parcelHelpers.interopDefault(_lodashEs);
var _Jonas;
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
// Importing module
// import { addToCart, totalPrice as price, tq } from './shoppingCart.js';
// addToCart('bread', 5);
// console.log(price,tq);
console.log('Importing module');
_shoppingCartJsDefault.default('pizza', 2);
_shoppingCartJsDefault.default('bread', 5);
_shoppingCartJsDefault.default('apples', 4);
console.log(_shoppingCartJs.cart);
// import cloneDeep from 'lodash';
const state = {
  cart: [{
    product: 'bread',
    quantity: 5
  }, {
    product: 'pizza',
    quantity: 5
  }],
  user: {
    loggedIn: true
  }
};
const stateClone = Object.assign({}, state);
const stateDeepClone = _lodashEsDefault.default(state);
state.user.loggedIn = false;
console.log(stateClone);
console.log(stateDeepClone);
if (module.hot) {
  module.hot.accept();
}
var _greeting = new WeakMap();
// Configuring Babel and Polyfilling
class Person {
  constructor(name) {
    _greeting.set(this, {
      writable: true,
      value: 'Hey'
    });
    this.name = name;
    console.log(`${_classPrivateFieldGet(this, _greeting)}, ${this.name}`);
  }
}
;
const jonas = new Person('Jonas');
console.log((_Jonas = 'Jonas') !== null && _Jonas !== void 0 ? _Jonas : null);
console.log(_shoppingCartJs.cart.find(el => el.quantity >= 2));
Promise.resolve('TEST').then(x => console.log(x));
